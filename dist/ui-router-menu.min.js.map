{
  "version": 3,
  "sources": [
    "app.js",
    "router-menu.provider.js",
    "state-registry.provider.js"
  ],
  "names": [
    "angular",
    "module",
    "provider",
    "setMain",
    "state",
    "validateMainRegistration",
    "main",
    "name",
    "emitMainRegistered",
    "whenMainSet",
    "mainSetEvent",
    "createMenu",
    "MainSetEvent",
    "then",
    "listener",
    "event",
    "raised",
    "emit",
    "listeners",
    "push",
    "fire",
    "source",
    "Array",
    "prototype",
    "slice",
    "call",
    "arguments",
    "forEach",
    "apply",
    "this",
    "$this",
    "$get",
    "$stateProvider",
    "routerMenuProvider",
    "registerState",
    "options",
    "opts",
    "prepareOptions",
    "register",
    "_this",
    "merge",
    "DEFAULT_OPTIONS",
    "isRoot",
    "configure",
    "service",
    "process",
    "attachParent",
    "isChild",
    "omit",
    "registerMain",
    "isMain",
    "prepareStateName",
    "addMainAsParent",
    "applyMainName",
    "processChildrens",
    "onMainSet",
    "prepareStateOptions",
    "parent",
    "stateOptions",
    "STATE_OPTS",
    "stateOpts",
    "mainState",
    "isObject",
    "applyName",
    "handleMainSet",
    "mainName",
    "hasMainNameApplied",
    "indexOf",
    "children",
    "length",
    "childState",
    "prepareChildOpts",
    "childOpts",
    "createChildrenOptsDefault",
    "noop"
  ],
  "mappings": "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",
  "file": "ui-router-menu.min.js",
  "sourcesContent": [
    "(function () {\r\n    angular.module('ui.router.menu', [\"ui.router\"]);\r\n})();",
    "angular.module('ui.router.menu')\r\n    .provider(\"routerMenu\", [function () {\r\n        var mainSetEvent = new MainSetEvent();\r\n        var emitMainRegistered = mainSetEvent.fire;\r\n\r\n\r\n        var $this = this;\r\n        $this.setMain = setMain;\r\n        $this.whenMainSet = whenMainSet;\r\n        $this.$get = createMenu;\r\n\r\n        var main;\r\n        var menu = {};\r\n\r\n\r\n        function setMain(state) {\r\n            validateMainRegistration();\r\n            main = state;\r\n            emitMainRegistered(state.name, state);\r\n\r\n\r\n            function validateMainRegistration() {\r\n                if (main) {\r\n                    throw \"Main state already registered (\" + main.name + \"). One there should be; no more, no less.\";\r\n                }\r\n            }\r\n        }\r\n\r\n        function whenMainSet() {\r\n            return mainSetEvent;\r\n        }\r\n\r\n\r\n        function createMenu() {\r\n            if (!main) {\r\n                throw \"Main state already not registered. One there should be; no more, no less.\";\r\n            }\r\n            //todo wrapper on menu\r\n            return main;\r\n        }\r\n\r\n        function MainSetEvent() {\r\n            var event = this;\r\n            event.then = then;\r\n            event.fire = fire;\r\n            event.raised = false;\r\n            event.source = null;\r\n\r\n            var listeners = [];\r\n\r\n\r\n            function then(listener) {\r\n                if (event.raised) {\r\n                    emit(listener);\r\n                }\r\n                listeners.push(listener);\r\n                return event;\r\n            }\r\n\r\n            function fire() {\r\n                event.source = Array.prototype.slice.call(arguments);\r\n                event.raised = true;\r\n                listeners.forEach(emit);\r\n            }\r\n\r\n            function emit(listener) {\r\n                listener.apply(listener, event.source);\r\n            }\r\n\r\n        }\r\n    }]);",
    "angular.module('ui.router.menu')\r\n    .provider(\"stateRegistry\", [\"$stateProvider\", \"routerMenuProvider\", function ($stateProvider, routerMenuProvider) {\r\n        var STATE_OPTS = \"menu\";\r\n\r\n        var _this = this;\r\n        _this.$get = angular.noop;\r\n        _this.state = registerState;\r\n\r\n        function registerState(state, options) {\r\n            var opts = prepareOptions(options);\r\n            register(state, opts);\r\n            return _this;\r\n        }\r\n\r\n\r\n        function prepareOptions(options) {\r\n            return angular.merge({}, DEFAULT_OPTIONS, options, {isRoot: true});\r\n        }\r\n\r\n\r\n        var DEFAULT_OPTIONS = {\r\n            /**\r\n             * Make root state to be main application state -> all states registered will be attached to it\r\n             * There could be only one mainState, otherwise error would be rised\r\n             * Equivalent to state property menu.mainState = true\r\n             */\r\n            mainState: false\r\n\r\n        };\r\n\r\n\r\n        function register(state, options) {\r\n            var stateOpts = prepareStateOptions();\r\n            var service = configure({});\r\n            return service.process();\r\n\r\n\r\n            function configure(service) {\r\n                service.process = process;\r\n                service.attachParent = isChild() ? attachParent : omit;\r\n                service.registerMain = isMain() ? registerMain : omit;\r\n                service.prepareStateName = prepareStateName;\r\n                service.addMainAsParent = !isMain() && isRoot() ? addMainAsParent : omit;\r\n                service.applyMainName = !isMain() ? applyMainName : omit;\r\n                service.registerState = registerState;\r\n                service.processChildrens = processChildrens;\r\n                return service;\r\n            }\r\n\r\n            function process() {\r\n                service.attachParent();\r\n                service.registerMain();\r\n                service.prepareStateName();\r\n                onMainSet(\r\n                    service.addMainAsParent,\r\n                    service.applyMainName,\r\n                    service.registerState\r\n                );\r\n                service.processChildrens();\r\n            }\r\n\r\n            function prepareStateOptions() {\r\n                var parent = options.parent;\r\n                delete options[\"parent\"];\r\n                var stateOptions = angular.merge({}, options, state[STATE_OPTS] || {});\r\n                stateOptions.parent = parent;\r\n                return stateOptions;\r\n            }\r\n\r\n            function attachParent() {\r\n                state.parent = stateOpts.parent;\r\n            }\r\n\r\n            function isMain() {\r\n                return stateOpts.mainState;\r\n            }\r\n\r\n            function isChild() {\r\n                return !isRoot();\r\n            }\r\n\r\n            function isRoot() {\r\n                return stateOpts.isRoot;\r\n            }\r\n            function registerMain() {\r\n                routerMenuProvider.setMain(state);\r\n            }\r\n\r\n            function prepareStateName() {\r\n                if (state.parent) {\r\n                    state.name = (angular.isObject(state.parent) ? state.parent.name : state.parent) + '.' + state.name;\r\n                }\r\n            }\r\n\r\n            function onMainSet(addMainAsParent, applyName, registerState) {\r\n                routerMenuProvider.whenMainSet().then(handleMainSet);\r\n\r\n                function handleMainSet(mainName, mainState) {\r\n                    addMainAsParent(mainState);\r\n                    applyName(mainName);\r\n                    registerState(state);\r\n                }\r\n            }\r\n\r\n            function addMainAsParent(main) {\r\n                state.parent = main;\r\n            }\r\n\r\n            function applyMainName(mainName) {\r\n                if (!hasMainNameApplied(mainName)) {\r\n                    state.name = mainName + \".\" + state.name;\r\n                }\r\n            }\r\n\r\n            function hasMainNameApplied(mainName) {\r\n                return state.name.indexOf(mainName) == 0;\r\n            }\r\n\r\n            function registerState() {\r\n                $stateProvider.state(state);\r\n            }\r\n\r\n            function processChildrens() {\r\n                var children = state.children;\r\n                if (children && children.length) {\r\n                    children.forEach(function (childState) {\r\n                        register(childState, prepareChildOpts());\r\n                    });\r\n                }\r\n            }\r\n\r\n            function prepareChildOpts() {\r\n                delete options[\"parent\"];\r\n                var childOpts = angular.merge({}, options, createChildrenOptsDefault());\r\n                childOpts.parent = state;\r\n                return childOpts;\r\n            }\r\n\r\n            function createChildrenOptsDefault() {\r\n                return {\r\n                    isRoot: false,\r\n                    mainState: false\r\n                };\r\n            }\r\n\r\n\r\n            function omit() {\r\n            }\r\n        }\r\n\r\n\r\n    }]);"
  ]
}